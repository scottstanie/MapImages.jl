var documenterSearchIndex = {"docs":
[{"location":"#MapImages.jl-1","page":"Home","title":"MapImages.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Index-1","page":"Home","title":"Index","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [MapImages]","category":"page"},{"location":"#MapImages.coarse_grid","page":"Home","title":"MapImages.coarse_grid","text":"Create a grid from a DemRsc on the 10^(-digits) grid lines\n\n\n\n\n\n","category":"function"},{"location":"#MapImages.crop_rsc_data","page":"Home","title":"MapImages.crop_rsc_data","text":"Adjusts the old demrsc of a MapImage after slicing\n\nTakes the 'rows' and 'cols' from demrsc and adjusts for the smaller size with a new dict\n\nThe row/colstart are the indices where we have sliced:     e.g. img[2:3:11, :] would have      rowstart = 2, rowstep = 3, newrows = 4\n\n\n\n\n\n","category":"function"},{"location":"#MapImages.find_obj-Tuple{Base.Broadcast.Broadcasted}","page":"Home","title":"MapImages.find_obj","text":"A = find_obj(As) returns the first MapImage among the arguments.\n\n\n\n\n\n","category":"method"},{"location":"#MapImages.get_cache_dir","page":"Home","title":"MapImages.get_cache_dir","text":"Returns the config folder for the application.  The default behavior is to return whatever is most appropriate for the operating system.\n\nThis is used to store gps timeseries data\n\nthe following folders could be returned: Mac OS X:   LibraryApplication Supportapertools Mac OS X (POSIX):   apertools Unix:   cacheapertools Unix (POSIX):   apertools\n\nforce_posix: if this is set to true then on any POSIX system the     folder will be stored in the home folder with a leading     dot instead of the XDG config home or darwin's     application support folder.\n\nBase on: https://github.com/pallets/click/blob/master/click/utils.py#L368\n\n\n\n\n\n","category":"function"},{"location":"#MapImages.grid-Tuple{Sario.DemRsc}","page":"Home","title":"MapImages.grid","text":"Returns meshgrid-like arrays X, Y\n\njulia> XX, YY = MapImages.grid(demrsc);\n\njulia> XX[1:3, 1:3] 3×3 Array{Float64,2}:  -104.0  -103.998  -103.997  -104.0  -103.998  -103.997  -104.0  -103.998  -103.997\n\njulia> YY[1:3, 1:3] 3×3 Array{Float64,2}:  31.9     31.9     31.9  31.8983  31.8983  31.8983  31.8967  31.8967  31.8967\n\njulia> XX, YY = MapImages.grid(demrsc, sparse=true);\n\n\n\n\n\n","category":"method"},{"location":"#MapImages.grid_extent-Tuple{Sario.DemRsc}","page":"Home","title":"MapImages.grid_extent","text":"Get the boundaries of a grid\n\nReturns:     tuple[float]: the boundaries of the latlon grid in order:     (lonleft,lonright,latbottom,lattop)\n\n\n\n\n\n","category":"method"},{"location":"#MapImages.intersection_corners-Tuple{Sario.DemRsc,Sario.DemRsc}","page":"Home","title":"MapImages.intersection_corners","text":"Returns:     tuple[float]: the boundaries of the intersection box of the 2 areas in order:     (lonleft,lonright,latbottom,lattop)\n\n\n\n\n\n","category":"method"},{"location":"#MapImages.latlon_to_dist","page":"Home","title":"MapImages.latlon_to_dist","text":"Find the distance between two lat/lon points on Earth\n\nlatlon_to_dist(lat_lon_start, lat_lon_end, R=6378)\n\nUses the haversine formula: https://en.wikipedia.org/wiki/Haversine_formula so it does not account for the ellopsoidal Earth shape. Will be with about 0.5-1% of the correct value.\n\nNotes: lats and lons are in degrees, and the values used for R Earth (6373 km) are optimized for locations around 39 degrees from the equator\n\nReference: https://andrew.hedges.name/experiments/haversine/\n\n\n\n\n\n","category":"function"},{"location":"#MapImages.nsew-Tuple{Any}","page":"Home","title":"MapImages.nsew","text":"return tuple of (north, south, east, west) from demrsc data\n\n\n\n\n\n","category":"method"},{"location":"#MapImages.read_station_llas-Tuple{}","page":"Home","title":"MapImages.read_station_llas","text":"Read in a DataFrame of gps stations with columns name, lat, lon, alt\n\n\n\n\n\n","category":"method"},{"location":"#MapImages.rowcol_to_latlon-Tuple{Sario.DemRsc,Any,Any}","page":"Home","title":"MapImages.rowcol_to_latlon","text":"Takes the row, col of a pixel and finds its lat/lon \n\n\n\n\n\n","category":"method"},{"location":"#MapImages.station_lonlat-Tuple{AbstractString}","page":"Home","title":"MapImages.station_lonlat","text":"Return the (lon, lat) of a station_name\n\n\n\n\n\n","category":"method"}]
}
